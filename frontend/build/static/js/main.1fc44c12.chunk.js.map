{"version":3,"sources":["components/StyledDropzone.js","analytics/utils.js","analytics/analyzer.js","analytics/api.js","assets/step1_hl.jpg","assets/step2_hl.jpg","assets/step3_hl.jpg","assets/step4_hl.jpg","components/Tutorial.js","assets/role_icons/wizard1.svg","assets/role_icons/wizard2.svg","assets/role_icons/stone1.svg","assets/role_icons/stone2.svg","assets/role_icons/photo1.svg","assets/role_icons/photo2.svg","assets/role_icons/reactor1.svg","assets/role_icons/reactor2.svg","assets/role_icons/english1.svg","assets/role_icons/english2.svg","assets/role_icons/sailor1.svg","assets/role_icons/sailor2.svg","assets/role_icons/emoji1.svg","assets/role_icons/emoji2.svg","assets/role_icons/name1.svg","assets/role_icons/name2.svg","components/Role.js","components/GeneralStats.js","App.js","components/MemberStats.js","components/ReactionStats.js","components/MessageStats.js","components/ChatStats.js","Results.js","reportWebVitals.js","index.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","margin","backgroundColor","color","outline","transition","fontSize","borderRadius","activeStyle","StyledDropzone","props","useDropzone","accept","onDrop","files","onFileInput","getRootProps","getInputProps","isDragActive","style","useMemo","className","streakLength","start","end","Math","abs","OneToOneDict","this","items","counts","key","value","decodeUtf8","s","decodeURIComponent","escape","RoleAssigner","members","scorekeepers","TalkerScorekeeper","LurkerScorekeeper","PhotographerScorekeeper","ReacterScorekeeper","EnglishTeacherScorekeeper","SailorScorekeeper","EmojiScorekeeper","NamerScorekeeper","message","forEach","scorekeeper","update","scores","valid","Object","entries","member","score","push","console","log","getScores","totals","role","roleAssignments","outputRolesData","n_unassigned","keys","length","findBestScore","canonicalRole","displayRole","displayData","set","roleNames","getItems","bestScore","winner","winningCanonicalRole","winningDisplayRole","bestDisplayData","memberScores","hasKey","valueCount","normalizedScore","wordsSent","totalWords","words","content","split","percent","inverse","totalScore","values","photosSent","totalPhotos","photos","reactsMade","totalReacts","reactions","actor","COMMA_WEIGHT","SEMICOLON_WEIGHT","punctuationScores","totalPunctuationScore","scoreIncrement","commaCount","match","semicolonCount","punctuationScore","SWEAR_WEIGHTS","swearScores","totalSwearScore","word","regex","RegExp","wordCount","swearScore","emojiAmounts","totalEmojiAmount","amountIncrement","emojiAmount","nameAmounts","totalNameAmount","test","nameAmount","apiUrl","id","a","fetch","result","method","headers","body","JSON","stringify","StepPanel","description","src","image","Tutorial","increment","numSteps","setState","stepNumber","min","state","decrement","max","steps","step1","step2","step3","step4","onClick","bind","React","Component","Role","roleDict","wizard1","wizard2","stone1","stone2","photo1","photo2","reactor1","reactor2","english1","english2","sailor1","sailor2","emoji1","emoji2","name1","name2","roleIcon","data","roleTitle","roleDesc","rolePersonName","roleStat","toPrecision","GeneralStats","reactCount","msgCount","results","round","longestStreak","totalMessages","title","class","App","processFileInput","file","fr","FileReader","onload","e","saveResult","participants","map","participant","name","roleAssigner","messagesByTime","i","totalReactsByMember","totalMessagesByMember","reactCounts","wordCounts","TOO_COMMON_WORDS","Set","firstMessage","streakStartMillis","streakEndMillis","longestStreakLength","longestStreakStartMillis","longestStreakEndMillis","validMembers","add","millis1","millis2","messages","sender","has","currMillis","Date","getHours","n_reacts","icon","reaction","toLowerCase","croppedPhrase","substr","lowerPhrase","numCommonWords","mostFrequentTime","maxMessageCount","time","messageCount","mostTotalReacts","mostTotalReactedMember","reacts","sortedReactCounts","sort","x","y","slice","sortedWordCounts","sortedMessagesByMember","roles","assignRoles","analyzeGroupchat","parse","target","then","response","json","resultID","readAsText","to","Home","toggleTutorial","displayTutorial","MemberStats","freqTimeStart","freqTimeEnd","mostReacted","mostReactedStats","ReactionStats","MessageStats","longestStreakStart","longestStreakEnd","getMonth","getDay","getFullYear","ChatStats","firstCommonPhrase","secondCommonPhrase","thirdCommonPhrase","Results","params","roleComponents","getResult","res","genRoles","rComponents","val","withRouter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","history","createBrowserHistory","root","document","getElementById","path","exec","window","location","hash","replace","ReactDOM","render","StrictMode","exact"],"mappings":"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","file":"static/js/main.1fc44c12.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '40px 20px 40px 20px',\n    margin: '12px',\n    backgroundColor: 'rgba(255, 92, 135, 0.2)',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'background .1s',\n    fontSize: 'calc(5px + 2vmin)',\n    borderRadius: '4px'\n};\n\nconst activeStyle = {\n    backgroundColor: 'rgba(255, 92, 135, 0.4)',\n};\n\nfunction StyledDropzone(props) {\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n    } = useDropzone({\n        accept: '.json',\n        onDrop: files => props.onFileInput(files),\n    });\n\n    const style = useMemo(() => ({\n        ...baseStyle,\n        ...(isDragActive ? activeStyle : {}),\n    }), [\n        isDragActive,\n    ]);\n\n    return (\n        <div className=\"container\">\n            <div {...getRootProps({ style })}>\n                <input {...getInputProps()} />\n                <p>Drop your message_1.json here, or click to select from your file system</p>\n            </div>\n        </div>\n    );\n}\n\nexport default StyledDropzone;\n","export function areConsecutive(millis1, millis2) {\n  return Math.abs(millis1 - millis2) < 24 * 60 * 60 * 1000;\n}\n\nexport function streakLength(start, end) {\n  const length = Math.abs(end - start);\n  return length;\n}\n\nexport function streakDayLength(start, end) {\n  return streakLength(start, end) / (24 * 60 * 60 * 1000);\n}\n\n\nexport class OneToOneDict {\n  // A dict with keys and values that obey a 1-to-1 relationship\n\n  constructor() {\n    this.items = {};\n    this.counts = {};\n  }\n\n  get(key) {\n    return this.items[key];\n  }\n\n  set(key, value) {\n    this.items[key] = value;\n\n    if (!(value in this.counts)) {\n      this.counts[value] = 0;\n    }\n\n    this.counts[value] += 1;\n  }\n\n  hasKey(key) {\n    return (key in this.items);\n  }\n\n  valueCount(value) {\n    if (value in this.counts) {\n      return this.counts[value];\n    } else {\n      return 0;\n    }\n  }\n\n  getItems() {\n    return this.items;\n  }\n}\n\n// tells you whether the given string contains at least one emoji (I feel like actually counting the # per message is unnecessary)\nexport function numEmojis(s) {\n  const decoded_string = decodeUtf8(s)\n  return (decoded_string.match(/\\p{Extended_Pictographic}/gu) || []).length\n}\n\n// returns a string that will actually be printed as the emoji\nexport function decodeUtf8(s) {\n  return decodeURIComponent(escape(s));\n}\n","import { areConsecutive, streakLength, streakDayLength, OneToOneDict, numEmojis, decodeUtf8 } from './utils.js';\n\n/*\n\n  How to use this code:\n\n  To find the Groupchat Wrapped results for a group chat, call analyzeGroupchat(), passing in\n  the JSON content read from the `message_1.json` file that the user uploads. The result that's returned\n  will contain all results for the Groupchat Wrapped (see the dictionary on lines 124-131 for full documentation).\n\n */\n\n\nexport default function analyzeGroupchat(content) {\n  let members = content.participants.map(participant => participant.name);\n  let roleAssigner = new RoleAssigner(members);\n\n  let messagesByTime = {};\n\n  for (var i = 0; i < 24; i++) {\n    messagesByTime[i] = 0; // messagesByTime maps {range start : msg count}\n  }\n\n  let totalReacts = 0;\n  let totalReactsByMember = {};\n  let totalMessages = 0;\n  let totalMessagesByMember = {};\n\n  for (const member of members) {\n    totalReactsByMember[member] = 0;\n    totalMessagesByMember[member] = 0;\n  }\n\n  let reactCounts = {};\n  let wordCounts = {};\n  const TOO_COMMON_WORDS = new Set([\n    'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'i', 'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at', 'this', 'but', 'his', 'by',\n    'from', 'they', 'we', 'say', 'her', 'she', 'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their', 'what', 'so', 'up', 'out', 'if', 'about', 'who',\n    'get', 'which', 'go', 'me', 'when', 'make', 'can', 'like', 'time', 'no', 'just', 'him', 'know', 'take', 'into', 'year', 'your', 'good', 'some', 'could',\n    'them', 'see', 'other', 'than', 'then', 'now', 'look', 'only', 'come', 'its', 'over', 'think', 'also', 'back', 'after', 'use', 'two', 'how', 'our', 'work',\n    'first', 'well', 'way', 'even', 'new', 'want', 'because', 'any', 'these', 'give', 'day', 'most', 'us', 'was', 'which', 'why', 'yeah', 'too', 'my', 'like',\n    'lol', 'lolol', 'lmao', 'yeah', 'sure', 'aight', 'alright', 'ok', 'btw', 'sup', 'okay', 'uh', 'um', 'uhh', 'hey', 'hi', 'yo', 'oh', 'ooh', 'nice', 'wait', 'oooh',\n    'cool', 'thats', 'true', 'ahh'\n  ])\n  let longestStreak = [];\n  let firstMessage = '';\n\n  let streakStartMillis = null;\n  let streakEndMillis = null;\n  let longestStreakLength = -1;\n  let longestStreakStartMillis = null;\n  let longestStreakEndMillis = null;\n\n  let validMembers = new Set();\n  members.forEach(member => validMembers.add(member));\n\n  for (const message of content.messages) {\n    // check time, fit to range, increment range count\n    let sender = message[\"sender_name\"];\n\n    if (validMembers.has(sender)) {\n      // if valid, increment total messages\n      totalMessages++;\n      totalMessagesByMember[sender]++;\n\n      // get time stuff\n      let currMillis = message[\"timestamp_ms\"];\n      let date = new Date(currMillis);\n      let time = date.getHours();\n\n      messagesByTime[time]++;\n\n      // if has reacts:\n      if (\"reactions\" in message) {\n        let n_reacts = message.reactions.length;\n\n        // increment members' react counts\n        totalReactsByMember[sender] += n_reacts;\n\n        // increment react counts\n        for (const react of message.reactions) {\n          let icon = decodeUtf8(react.reaction);\n\n          if (icon in reactCounts) {\n            reactCounts[icon]++;\n          }\n          else {\n            reactCounts[icon] = 1;\n          }\n\n          totalReacts++;\n        }\n      }\n\n      // increment current streak\n      // if current streak dne or it's not broken, extend it\n      if (areConsecutive(streakStartMillis, currMillis)) {\n        streakStartMillis = currMillis; // set start cuz it goes backwards\n      } else {\n        streakStartMillis = currMillis;\n        streakEndMillis = currMillis;\n      }\n\n      if (streakLength(streakStartMillis, streakEndMillis) > longestStreakLength) {\n        longestStreakStartMillis = streakStartMillis;\n        longestStreakEndMillis = streakEndMillis;\n        longestStreakLength = streakLength(streakStartMillis, streakEndMillis);\n      }\n\n      // stuff to do with content\n      if (\"content\" in message) {\n        const content = message.content;\n        // set firstMessage to message content\n        firstMessage = content;\n\n        if (!/sent an attachment/.test(content.toLowerCase()) && !/named the group/.test(content.toLowerCase())) {\n          for (let phrase of (content.match(/(^|\\s)([A-Za-z]+\\s[A-Za-z]+\\s[A-Za-z]+)($|\\s)/g) || [])) {\n            let croppedPhrase = phrase;\n\n            if (croppedPhrase[0] == ' ') {\n              croppedPhrase = croppedPhrase.substr(1, croppedPhrase.length);\n            }\n\n            if (croppedPhrase[croppedPhrase.length - 1] == ' ') {\n              croppedPhrase = croppedPhrase.substr(0, croppedPhrase.length - 1);\n            }\n\n            const lowerPhrase = croppedPhrase.toLowerCase()\n            let numCommonWords = 0;\n\n            for (let word of lowerPhrase.split(' ')) {\n              if (TOO_COMMON_WORDS.has(word)) {\n                numCommonWords++;\n              }\n            }\n\n            // only increment if it's not too common\n            if (numCommonWords <= 1) {\n              if (!(lowerPhrase in wordCounts)) {\n                wordCounts[lowerPhrase] = 0;\n              }\n\n              wordCounts[lowerPhrase]++;\n            }\n          }\n        }\n      }\n\n      roleAssigner.update(message);\n    }\n  }\n\n  // find most frequent time, most total reacts\n  let mostFrequentTime = -1;\n  let maxMessageCount = -1;\n\n  for (const [time, messageCount] of Object.entries(messagesByTime)) {\n    if (messageCount > maxMessageCount) {\n      mostFrequentTime = time;\n      maxMessageCount = messageCount;\n    }\n  }\n\n  let mostTotalReacts = -1;\n  let mostTotalReactedMember = '';\n\n  for (const [member, reacts] of Object.entries(totalReactsByMember)) {\n    if (reacts > mostTotalReacts) {\n      mostTotalReacts = reacts;\n      mostTotalReactedMember = member;\n    }\n  }\n\n  // sort everything\n  let sortedReactCounts = Object.keys(reactCounts).map(function(key) {\n    return [key, reactCounts[key]];\n  });\n  sortedReactCounts.sort(function(x, y) {return y[1] - x[1]});\n  sortedReactCounts = sortedReactCounts.slice(0, 10);\n\n  let sortedWordCounts = Object.keys(wordCounts).map(function(key) {\n    return [key, wordCounts[key]];\n  });\n  sortedWordCounts.sort(function(x, y) {return y[1] - x[1]});\n  sortedWordCounts = sortedWordCounts.slice(0, 10);\n\n  let sortedMessagesByMember = Object.keys(totalMessages).map(function(key) {\n    return [key, totalMessages[key]];\n  });\n  sortedMessagesByMember.sort(function(x, y) {return y[1] - x[1]});\n  sortedMessagesByMember = sortedMessagesByMember.slice(0, 10);\n\n  return {\n    title: content.title,\n    mostFrequentTime: [mostFrequentTime, maxMessageCount],\n    mostTotalReacts: [mostTotalReactedMember, mostTotalReacts],\n    reactCounts: sortedReactCounts,\n    wordCounts: sortedWordCounts,\n    longestStreak: [longestStreakStartMillis, longestStreakEndMillis],\n    firstMessage: firstMessage,\n    totalReacts: totalReacts,\n    totalMessages: totalMessages,\n    totalMessagesByMember: sortedMessagesByMember,\n    roles: roleAssigner.assignRoles()\n  };\n}\n\nclass RoleAssigner {\n  constructor(members) {\n    this.scorekeepers = [\n      new TalkerScorekeeper(members),\n      new LurkerScorekeeper(members),\n      new PhotographerScorekeeper(members),\n      new ReacterScorekeeper(members),\n      new EnglishTeacherScorekeeper(members),\n      new SailorScorekeeper(members),\n      new EmojiScorekeeper(members),\n      new NamerScorekeeper(members),\n    ];\n  }\n\n  update(message) {\n    this.scorekeepers.forEach(scorekeeper =>\n      scorekeeper.update(message)\n    );\n  }\n\n  getScores() {\n    let scores = {};\n\n    for (const scorekeeper of this.scorekeepers) {\n      if (scorekeeper.valid()) {\n        for (const [member, score] of Object.entries(scorekeeper.scores())) {\n          if (!(member in scores)) {\n              scores[member] = [];\n          }\n\n          scores[member].push(score);\n        }\n      } else {\n        console.log('scorekeeper is not valid')\n      }\n    }\n\n    return scores;\n  }\n\n  assignRoles() {\n    let scores = this.getScores();\n    let totals = {};\n\n    for (const scorekeeper of this.scorekeepers) {\n      const roleNames = scorekeeper.role()\n      const canonicalRole = roleNames[0]\n      totals[canonicalRole] = 1;\n    }\n\n    let roleAssignments = new OneToOneDict();\n    let outputRolesData = new OneToOneDict();\n    let n_unassigned = Object.keys(scores).length;\n\n    while (n_unassigned > 0) {\n      let [member, canonicalRole, displayRole, score, displayData] = this.findBestScore(scores, totals, roleAssignments);\n\n      if (member != null) {\n        roleAssignments.set(member, canonicalRole);\n        outputRolesData.set(member, [displayRole, displayData])\n\n        for (const [roleNames, score, displayData] in scores[member]) {\n          const canonicalRole = roleNames[0]\n          totals[canonicalRole] -= score;\n        }\n      }\n\n      n_unassigned--;\n    }\n\n    return outputRolesData.getItems();\n  }\n\n  findBestScore(scores, totals, roleAssignments) {\n    let bestScore = null;\n    let winner = null;\n    let winningCanonicalRole = null;\n    let winningDisplayRole = null;\n    let bestDisplayData = null;\n\n    for (const [member, memberScores] of Object.entries(scores)) {\n      // don't assign to members that already have a role\n      if (!roleAssignments.hasKey(member)) {\n        for (const [roleNames, score, displayData] of memberScores) {\n          const canonicalRole = roleNames[0]\n\n          // don't assign roles that have been assigned twice\n          if (roleAssignments.valueCount(canonicalRole) < 2) {\n            let normalizedScore = score / totals[canonicalRole];\n\n            if (bestScore == null || normalizedScore > bestScore) {\n              bestScore = normalizedScore;\n              winner = member;\n              winningCanonicalRole = canonicalRole;\n              winningDisplayRole = roleNames[roleAssignments.valueCount(canonicalRole)];\n              bestDisplayData = displayData;\n            }\n          }\n        }\n      }\n    }\n\n    return [winner, winningCanonicalRole, winningDisplayRole, totals[winningCanonicalRole] * bestScore, bestDisplayData]\n  }\n}\n\nclass TalkerScorekeeper {\n  constructor(members) {\n    this.wordsSent = {};\n\n    for (const member of members) {\n      this.wordsSent[member] = 0.0;\n    }\n\n    this.totalWords = 0.0;\n  }\n\n  update(message) {\n    let member = message[\"sender_name\"];\n\n    if (member in this.wordsSent) {\n      if (\"content\" in message) {\n        let words = message.content.split(\" \").length;\n\n        this.wordsSent[member] += words;\n        this.totalWords += words;\n      }\n    }\n  }\n\n  valid() {\n    return true; // cuz it's based on messages, and if you don't even have messages then you have nothing\n  }\n\n  scores() {\n    let scores = {};\n\n    for (const [member, wordsSent] of Object.entries(this.wordsSent)) {\n      if (wordsSent > 0) {\n        const percent = wordsSent / this.totalWords;\n        scores[member] = [this.role(), percent, percent];\n      }\n    }\n\n    return scores;\n  }\n\n  role() {\n    return ['The Word Wizard', 'The Alphabet Apprentice'];\n  }\n}\n\nclass LurkerScorekeeper {\n  constructor(members) {\n    this.inverse = new TalkerScorekeeper(members);\n  }\n\n  update(message) {\n    this.inverse.update(message);\n  }\n\n  valid() {\n    return true; // cuz it's based on messages, and if you don't even have messages then you have nothing\n  }\n\n  scores() {\n    let scores = this.inverse.scores();\n    let totalScore = 0.0;\n\n    for (const [role, score] of Object.entries(scores)) {\n      score[0] = this.role();\n      score[2] = score[1];\n      score[1] = 1.0 - score[1];\n\n      totalScore += score[1];\n    }\n\n    for (const score of Object.values(scores)) {\n      score[1] /= totalScore;\n    }\n\n    return scores;\n  }\n\n  role() {\n    return ['The Stone', 'The Pebble'];\n  }\n}\n\nclass PhotographerScorekeeper {\n  constructor(members) {\n    this.photosSent = {};\n\n    for (const member of members) {\n      this.photosSent[member] = 0.0;\n    }\n\n    this.totalPhotos = 0.0;\n  }\n\n  update(message) {\n    let member = message[\"sender_name\"];\n\n    if (member in this.photosSent) {\n      if (\"photos\" in message) {\n        let photos = message.photos.length;\n\n        this.photosSent[member] += photos;\n        this.totalPhotos += photos;\n      }\n    }\n  }\n\n  valid() {\n    return true; // cuz it's based on messages, and if you don't even have messages then you have nothing\n  }\n\n  scores() {\n    let scores = {};\n\n    for (const [member, photosSent] of Object.entries(this.photosSent)) {\n      if (photosSent > 0) {\n        const percent = photosSent / this.totalPhotos\n        scores[member] = [this.role(), percent, percent];\n      }\n    }\n\n    return scores;\n  }\n\n  role() {\n    return ['The Photographer', 'The Amateur Photographer'];\n  }\n}\n\nclass ReacterScorekeeper {\n  constructor(members) {\n    this.reactsMade = {};\n\n    for (const member of members) {\n      this.reactsMade[member] = 0.0;\n    }\n\n    this.totalReacts = 0.0;\n  }\n\n  update(message) {\n    if (\"reactions\" in message) {\n      for (const react of message.reactions) {\n        let member = react.actor;\n\n        if (member in this.reactsMade) {\n          this.reactsMade[member]++;\n          this.totalReacts++;\n        }\n      }\n    }\n  }\n\n  valid() {\n    return this.totalReacts > 10;\n  }\n\n  scores() {\n    let scores = {};\n\n    for (const [member, reactsMade] of Object.entries(this.reactsMade)) {\n      if (reactsMade > 0) {\n        const percent = reactsMade / this.totalReacts;\n        scores[member] = [this.role(), percent, percent];\n      }\n    }\n\n    return scores;\n  }\n\n  role() {\n    return ['The Reactor', 'The Encourager'];\n  }\n}\n\nclass EnglishTeacherScorekeeper {\n  COMMA_WEIGHT = 1;\n  SEMICOLON_WEIGHT = 3;\n\n  constructor(members) {\n    this.punctuationScores = {};\n\n    for (const member of members) {\n      this.punctuationScores[member] = 0.0;\n    }\n\n    this.totalPunctuationScore = 0.0;\n  }\n\n  update(message) {\n    let member = message[\"sender_name\"];\n    let scoreIncrement = 0.0;\n\n    if (member in this.punctuationScores) {\n      if (\"content\" in message) {\n        const content = message[\"content\"]\n        const commaCount = (content.match(/[A-Za-z],\\s/g) || []).length;\n        const semicolonCount = (content.match(/[A-Za-z];\\s/g) || []).length;\n        // no period counts because all \"CMO changed the nickname of Kevin Xu to CFO\"\n\n        scoreIncrement = this.COMMA_WEIGHT * commaCount + this.SEMICOLON_WEIGHT * semicolonCount;\n        this.punctuationScores[member] += scoreIncrement;\n        this.totalPunctuationScore += scoreIncrement;\n      }\n    }\n  }\n\n  // PAT DEBUG do valid with numMessages\n  valid() {\n    return this.totalPunctuationScore > 100;\n  }\n\n  scores() {\n    let scores = {};\n\n    for (const [member, punctuationScore] of Object.entries(this.punctuationScores)) {\n      if (punctuationScore > 0) {\n        const percent = punctuationScore / this.totalPunctuationScore;\n        scores[member] = [this.role(), percent, percent];\n      }\n    }\n\n    return scores;\n  }\n\n  role() {\n    return ['The English Teacher', 'The English TA'];\n  }\n}\n\nclass SailorScorekeeper {\n  SWEAR_WEIGHTS = {\n    'shit': 1,\n    'bitch': 1,\n    '\\bass\\b': 1,\n    'cunt': 1,\n    'fuck': 1,\n    'motherfuck': 1, // motherfuck contains fuck, so really it's 1 + 1 = 2\n  };\n\n  constructor(members) {\n    this.swearScores = {};\n\n    for (const member of members) {\n      this.swearScores[member] = 0.0;\n    }\n\n    this.totalSwearScore = 0.0;\n  }\n\n  update(message) {\n    let member = message[\"sender_name\"];\n    let scoreIncrement = 0.0;\n\n    if (member in this.swearScores) {\n      if ('content' in message) {\n        const content = message['content']\n\n        for (const word in this.SWEAR_WEIGHTS) {\n          const regex = new RegExp(`${word}`, 'gi')\n          const wordCount = (content.match(regex) || []).length;\n          scoreIncrement += this.SWEAR_WEIGHTS[word] * wordCount;\n        }\n\n        this.swearScores[member] += scoreIncrement;\n        this.totalSwearScore += scoreIncrement;\n      }\n    }\n  }\n\n  // PAT DEBUG do valid with numMessages\n  valid() {\n    return this.totalSwearScore > 10;\n  }\n\n  scores() {\n    let scores = {};\n\n    for (const [member, swearScore] of Object.entries(this.swearScores)) {\n      if (swearScore > 0) {\n        const percent = swearScore / this.totalSwearScore;\n        scores[member] = [this.role(), percent, percent];\n      }\n    }\n\n    return scores;\n  }\n\n  role() {\n    return ['The Sailor', 'The First Mate'];\n  }\n}\n\nclass EmojiScorekeeper {\n  constructor(members) {\n    this.emojiAmounts = {};\n\n    for (const member of members) {\n      this.emojiAmounts[member] = 0.0;\n    }\n\n    this.totalEmojiAmount = 0.0;\n  }\n\n  update(message) {\n    let member = message[\"sender_name\"];\n    let amountIncrement = 0.0;\n\n    if (member in this.emojiAmounts) {\n      if ('content' in message) {\n        const content = message['content'];\n        amountIncrement = numEmojis(content);\n\n        this.emojiAmounts[member] += amountIncrement;\n        this.totalEmojiAmount += amountIncrement\n      }\n    }\n  }\n\n  // PAT DEBUG do valid with numMessages\n  valid() {\n    return this.totalEmojiAmount > 5;\n  }\n\n  scores() {\n    let scores = {};\n\n    for (const [member, emojiAmount] of Object.entries(this.emojiAmounts)) {\n      if (emojiAmount > 0) {\n        const percent = emojiAmount / this.totalEmojiAmount;\n        scores[member] = [this.role(), percent, percent];\n      }\n    }\n\n    return scores;\n  }\n\n  role() {\n    return ['The Emoji Spammer', 'The Emoji Poweruser'];\n  }\n}\n\nclass NamerScorekeeper {\n  constructor(members) {\n    this.nameAmounts = {};\n\n    for (const member of members) {\n      this.nameAmounts[member] = 0.0;\n    }\n\n    this.totalNameAmount = 0.0;\n  }\n\n  update(message) {\n    let member = message[\"sender_name\"];\n    let amountIncrement = 0.0;\n\n    if (member in this.nameAmounts) {\n      if ('content' in message) {\n        const content = message['content'];\n\n        if (/set\\sthe\\snickname\\sfor/.test(content)) {\n          amountIncrement = 1.0;\n        } else if (/set\\syour\\snickname\\sto/.test(content)) {\n          amountIncrement = 1.0;\n        }\n\n        this.nameAmounts[member] += amountIncrement;\n        this.totalNameAmount += amountIncrement\n      }\n    }\n  }\n\n  valid() {\n    return this.totalNameAmount > 3;\n  }\n\n  scores() {\n    let scores = {};\n\n    for (const [member, nameAmount] of Object.entries(this.nameAmounts)) {\n      if (nameAmount > 0) {\n        const percent = nameAmount / this.totalNameAmount;\n        scores[member] = [this.role(), percent, percent];\n      }\n    }\n\n    return scores;\n  }\n\n  role() {\n    return ['The Name Author', 'The Name Editor'];\n  }\n}\n","const apiUrlDev = '127.0.0.1:8000';\nconst apiUrlProd = 'ribbon-api-prod.us-west-1.elasticbeanstalk.com';\n\nconst apiUrl = apiUrlProd;\n\nexport async function getResult(id) {\n  return fetch(\"http://\" + apiUrl + \"/results/\" + id);\n}\n\nexport async function saveResult(result) {\n  return fetch(\"http://\" + apiUrl + \"/results\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(result)\n  });\n}\n","export default __webpack_public_path__ + \"static/media/step1_hl.4de6c3aa.jpg\";","export default __webpack_public_path__ + \"static/media/step2_hl.32364970.jpg\";","export default __webpack_public_path__ + \"static/media/step3_hl.9cb663e6.jpg\";","export default __webpack_public_path__ + \"static/media/step4_hl.51d0744f.jpg\";","import React from 'react';\n\nimport step1 from '../assets/step1_hl.jpg';\nimport step2 from '../assets/step2_hl.jpg';\nimport step3 from '../assets/step3_hl.jpg';\nimport step4 from '../assets/step4_hl.jpg';\n\nimport '../styles/Tutorial.css'\n\nclass Tutorial extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      stepNumber: 1\n    }\n  }\n\n  increment = (numSteps) => {\n    this.setState({stepNumber: Math.min(numSteps, this.state.stepNumber + 1)});\n  }\n\n  decrement = () => {\n    this.setState({stepNumber: Math.max(1, this.state.stepNumber - 1)});\n  }\n\n  render() {\n    let steps = [\n      <StepPanel description='\"Deselect All\" and then select \"Messages\"' image={step1} />,\n      <StepPanel description='\"Create File\" with your preferred date and settings shown below' image={step2} />,\n      <StepPanel description='Download the file when it is ready (this can take upwards of 20 minutes, depending on your date settings)' image={step3} />,\n      <StepPanel description='Extract the file and find the json of the chat to analyze (facebook-name > messages > inbox > chatname > message_1.json)' image={step4} />\n    ]\n\n    return(\n      <div className=\"tutorialPanel\">\n        <h3> How to Export Your Messenger Data</h3>\n        <div className=\"buttons\">\n          <button onClick={this.decrement}>Previous</button>\n          <button onClick={this.increment.bind(this, steps.length)}>Next</button>\n        </div>\n        {steps[this.state.stepNumber - 1]}\n      </div>\n    );\n  }\n\n}\n\nfunction StepPanel(props) {\n  return (\n    <div className=\"stepPanelH\">\n      <div>{props.description}</div>\n      <div><img className=\"stepImg\" src={props.image}/></div>\n    </div>\n  )\n}\n\nexport default Tutorial;\n","export default __webpack_public_path__ + \"static/media/wizard1.676249da.svg\";","export default __webpack_public_path__ + \"static/media/wizard2.a1a3b9c0.svg\";","export default __webpack_public_path__ + \"static/media/stone1.0334579d.svg\";","export default __webpack_public_path__ + \"static/media/stone2.215fec12.svg\";","export default __webpack_public_path__ + \"static/media/photo1.284385b3.svg\";","export default __webpack_public_path__ + \"static/media/photo2.ba323590.svg\";","export default __webpack_public_path__ + \"static/media/reactor1.cba154d5.svg\";","export default __webpack_public_path__ + \"static/media/reactor2.ec607eff.svg\";","export default __webpack_public_path__ + \"static/media/english1.5bbcc0c2.svg\";","export default __webpack_public_path__ + \"static/media/english2.66ce52bb.svg\";","export default __webpack_public_path__ + \"static/media/sailor1.1c4c278c.svg\";","export default __webpack_public_path__ + \"static/media/sailor2.b8e043f3.svg\";","export default __webpack_public_path__ + \"static/media/emoji1.a75a8ed2.svg\";","export default __webpack_public_path__ + \"static/media/emoji2.fd317d07.svg\";","export default __webpack_public_path__ + \"static/media/name1.bfdc362d.svg\";","export default __webpack_public_path__ + \"static/media/name2.7db7dbeb.svg\";","\nimport wizard1 from '../assets/role_icons/wizard1.svg';\nimport wizard2 from '../assets/role_icons/wizard2.svg';\nimport stone1 from '../assets/role_icons/stone1.svg';\nimport stone2 from '../assets/role_icons/stone2.svg';\nimport photo1 from '../assets/role_icons/photo1.svg';\nimport photo2 from '../assets/role_icons/photo2.svg';\nimport reactor1 from '../assets/role_icons/reactor1.svg';\nimport reactor2 from '../assets/role_icons/reactor2.svg';\nimport english1 from '../assets/role_icons/english1.svg';\nimport english2 from '../assets/role_icons/english2.svg';\nimport sailor1 from '../assets/role_icons/sailor1.svg';\nimport sailor2 from '../assets/role_icons/sailor2.svg';\nimport emoji1 from '../assets/role_icons/emoji1.svg';\nimport emoji2 from '../assets/role_icons/emoji2.svg';\nimport name1 from '../assets/role_icons/name1.svg';\nimport name2 from '../assets/role_icons/name2.svg';\n\nimport '../styles/Role.css';\n\n// General role display\n\nlet Role = props => {\n\n    // Title name, icon path, description, stat unit\n    const roleDict = {\n        'The Word Wizard': [wizard1, 'This guy sure talks a lot. This guy sure talks a lot. This guy sure talks a lot. This guy sure talks a lot.', '% of total words'],\n        'The Alphabet Apprentice': [wizard2, 'This guy talks a lot, but not as much as the other guy.', '% of total words'],\n        'The Stone': [stone1, 'Maybe everyone else just talks too much.', '% of total messages sent'],\n        'The Pebble': [stone2, 'A chip off the old block.', '% of total messages sent'],\n        'The Photographer': [photo1, 'Is a picture of a plate of chicken alfredo worth 1000 words? Has anyone tried to write 1000 words about chicken alfredo?', '% of total photos sent'],\n        'The Amateur Photographer': [photo2, 'Does a phone really count as a camera?', '% of total photos sent'],\n        'The Reactor': [reactor1, 'Definitely reflective of their true personality. I mean, just look at them.', '% of total reacts given'],\n        'The Encourager': [reactor2, 'Everyone just needs a little encouragement. Thanks.', '% of total reacts given'],\n        'The English Teacher': [english1, 'I love semicolons. I dressed up as a semicolon for Halloween.', '% of total number of commas and semicolons'],\n        'The English TA': [english2, 'I was a comma, and the other TA was a period. We had to explain it a lot.', '% of total number of commas and semicolons'],\n        'The Sailor': [sailor1, 'F--- f--- f--- f--- sh-- f--- sh-- b---- f--- -----------------', '% of total swear words'],\n        'The First Mate': [sailor2, 'Potty mouth in training. Mouth is probably full of shit right now.', '% of total swear words'],\n        'The Emoji Spammer': [emoji1, '😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂', '% of total emojis sent'],\n        'The Emoji Poweruser': [emoji2, '😳😳😳😳👇🏻👆🏻😳👆🏻👆🏻', '% of total emojis sent'],\n        'The Name Author': [name1, 'Some crimes go unpunished. Also known as:', '% of total nickname changes'],\n        'The Name Editor': [name2, 'Only dabbles a bit in the dark art of text manipulation.', '% of total nickname changes'],\n    }\n\n    // Parse relevant data from the prop\n    let roleIcon = roleDict[props.data[1][0]][0];\n    let roleTitle = props.data[1][0];\n    let roleDesc = roleDict[props.data[1][0]][1];\n    let rolePersonName = props.data[0];\n    let roleStat = (props.data[1][1]*100).toPrecision(3) + roleDict[props.data[1][0]][2];\n\n    return (\n        <div className=\"panelCard roleCard\">\n\n            <div className=\"roleCardInner\">\n                <div>\n                    <img className=\"roleIcon\" src={roleIcon} />\n                </div>\n                <div className=\"roleCardInnerInfo\">\n                    <div className=\"roleTitle\"> {roleTitle} </div>\n                    <div> {rolePersonName} </div>\n                    <div> {roleDesc} </div>\n                    <div> {roleStat} </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Role;\n","// word count, msg count\nimport '../styles/GeneralStats.css';\n\nlet GeneralStats = props => {\n\n    let chatName;\n    let longestStreak = '';\n    let reactCount = '';\n    let msgCount = '';\n    let title = '';\n\n    console.log(props.results)\n\n    if (Object.keys(props.results).length > 0) {\n      longestStreak = Math.round(Math.abs(props.results.longestStreak[0] - props.results.longestStreak[1]) / (24 * 60 * 60 * 1000));\n      reactCount = props.results.totalReacts;\n      msgCount = props.results.totalMessages;\n      title = props.results.title;\n    }\n\n\n    return(\n      <div className=\"genStatCard\">\n        <div>\n          <div className=\"number\"> {msgCount} </div>\n          <div>Total Messages Sent</div>\n        </div>\n        <div class=\"emphasized\">\n          <div className=\"number\"> {reactCount} </div>\n          <div>Total Reacts Given</div>\n        </div>\n      </div>\n    );\n}\n\nexport default GeneralStats;\n","import React from 'react';\nimport StyledDropzone from './components/StyledDropzone.js'\n\nimport analyzeGroupchat from './analytics/analyzer.js'\nimport { getResult, saveResult } from './analytics/api.js'\n\nimport Tutorial from './components/Tutorial.js';\nimport Role from './components/Role.js'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n    withRouter\n} from \"react-router-dom\";\n\nimport './App.css';\nimport './styles/PanelCard.css'\nimport GeneralStats from './components/GeneralStats.js';\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        // Tracks the processed message_1.json results\n        this.state = {\n            resultID: -1\n        }\n    }\n\n    // Process the raw .json file inputted in the dropzone\n    processFileInput = (files) => {\n        console.log(files);\n        const file = files[0];\n        const fr = new FileReader();\n        fr.onload = (e) => {\n            const content = JSON.parse(e.target.result);\n            const result = analyzeGroupchat(content);\n\n            saveResult(result).then(response =>\n              response.json()\n            ).then(data =>\n              this.setState({ resultID: data.id })\n            )\n        }\n        fr.readAsText(file);\n    };\n\n    render() {\n        if (this.state.resultID > 0) {\n          return <Redirect to={\"results/\" + this.state.resultID} />;\n        }\n        else {\n          return (\n            <Home onFileInput={this.processFileInput}/>\n          );\n        }\n    }\n}\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayTutorial: false\n    }\n  }\n\n  toggleTutorial = () => {\n    this.setState({ displayTutorial: !this.state.displayTutorial });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1><span className=\"bolded\">Ribbon</span></h1>\n          <StyledDropzone onFileInput={this.props.onFileInput}/>\n          <button onClick={this.toggleTutorial}>{this.state.displayTutorial ? 'Hide tutorial ↑' : 'Show tutorial ↓'}</button>\n          {this.state.displayTutorial && <Tutorial />}\n        </div>\n      </div>\n    );\n  }\n\n}\n","// most & least freq contributors, convo times, etc \n\nlet MemberStats = props => {\n\n    let freqTimeStart;\n    let freqTimeEnd;\n    let mostReacted;\n    let mostReactedStats;\n\n    // sometimes the prop is null since the state is a little messed up\n    if (Object.keys(props.results).length > 0) {\n        freqTimeStart = props.results['mostFrequentTime'][0];\n        freqTimeEnd = props.results['mostFrequentTime'][1];\n        mostReacted = props.results['mostTotalReacts'][0];\n        mostReactedStats = props.results['mostTotalReacts'][1]; \n    }\n\n    return(\n        <div className=\"panelCard\"> \n            <div> Most frequent conversation time: {freqTimeStart} to {freqTimeEnd}  </div>\n            <div> Most reacted: {mostReacted}, with {mostReactedStats} </div>\n        </div>\n    );\n}\n\nexport default MemberStats;","//reaction count, histogram\n\nlet ReactionStats = props => {\n\n    let totalReacts;\n    let reactionArray;\n\n    if (Object.keys(props.results).length > 0) {\n        totalReacts = props.results['totalReacts'];\n        reactionArray = props.results['reactCounts'];\n    }\n\n    return(\n        <div className=\"panelCard\"> \n            <div> Total reacts: {totalReacts} </div>\n            <div> Distribution: </div>\n        </div>\n    );\n}\n\nexport default ReactionStats;","// total messages, avg words, longest streak, etc\n\nlet MessageStats = props => {\n\n    let msgCount;\n    let avgWordCount;\n    let longestStreakStart;\n    let longestStreakEnd;\n    let firstMessage;\n\n    if (Object.keys(props.results).length > 0) { \n        longestStreakStart = new Date(props.results['longestStreak'][0]);\n        longestStreakStart = longestStreakStart.getMonth() + \"-\" + longestStreakStart.getDay() + \"-\" + longestStreakStart.getFullYear();\n        longestStreakEnd = new Date(props.results['longestStreak'][1]);\n        longestStreakEnd = longestStreakEnd.getMonth() + \"-\" + longestStreakEnd.getDay() + \"-\" + longestStreakEnd.getFullYear();\n        firstMessage = props.results['firstMessage'];\n    }\n\n    return(\n        <div className=\"panelCard\"> \n            <div> Longest streak: {longestStreakStart} to {longestStreakEnd}</div>\n            <div> First recorded message: {firstMessage}</div>\n        </div>\n    );\n}\n\nexport default MessageStats;","// themes, common words, common phrases, uncommon\n\nlet ChatStats = props => {\n\n    let firstCommonPhrase;\n    let secondCommonPhrase;\n    let thirdCommonPhrase;\n\n    if (Object.keys(props.results).length > 0) { \n        firstCommonPhrase = props.results[\"wordCounts\"][0][0];\n        secondCommonPhrase = props.results[\"wordCounts\"][1][0];\n        thirdCommonPhrase = props.results[\"wordCounts\"][2][0];\n    }\n\n    return(\n        <div className=\"panelCard\"> \n            <div> First most common phrase: {firstCommonPhrase} </div>\n            <div> Second most common phrase: {secondCommonPhrase}</div>\n            <div> Third most common phrase: {thirdCommonPhrase} </div>\n        </div>\n    );\n}\n\nexport default ChatStats;","import React from 'react';\nimport StyledDropzone from './components/StyledDropzone.js'\n\nimport analyzeGroupchat from './analytics/analyzer.js'\nimport { getResult, saveResult } from './analytics/api.js'\n\nimport GeneralStats from './components/GeneralStats.js';\nimport MemberStats from './components/MemberStats.js';\nimport ReactionStats from './components/ReactionStats.js';\nimport MessageStats from './components/MessageStats.js';\nimport ChatStats from './components/ChatStats.js';\n\nimport Tutorial from './components/Tutorial.js';\nimport Role from './components/Role.js'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n    withRouter\n} from \"react-router-dom\";\n\nimport './App.css';\nimport './styles/Results.css';\nimport './styles/PanelCard.css';\n\n\nclass Results extends React.Component {\n    constructor(props) {\n      super(props);\n\n      let { id } = this.props.match.params;\n\n      this.state = {\n        id: id,\n        result: {},\n        roleComponents: []\n      }\n    }\n\n    componentDidMount() {\n      getResult(this.state.id).then(response => response.json()).then(data => {\n        this.setState({result: data})\n      })\n      .then(res => {\n          this.setState({roleComponents: this.genRoles()});\n      });\n    }\n\n    genRoles() {\n        let roles = this.state?.result.roles;\n        console.log(\"raw roles\",roles);\n        console.log(\"objected\", Object.entries(roles));\n\n        // Holds an array of the role components to display\n        let rComponents = [];\n        Object.entries(roles).forEach((val, i) => {\n            //console.log(val);\n            rComponents.push(<Role data={val} key={i}/>);\n        });\n\n        return rComponents;\n    }\n\n    render() {\n      return (\n          <div className='Results'>\n            <div className='container'>\n              <h1>{this.state.result.title}</h1>\n              {<GeneralStats results={this.state.result}/>}\n              {<MemberStats results={this.state.result}/>}\n              <ReactionStats results={this.state.result}/>\n              <MessageStats results={this.state.result} />\n              <ChatStats results={this.state.result} />\n              {this.state.roleComponents}\n            </div>\n          </div>\n      );\n    }\n    // let roles = props.results.roles;\n    // console.log(\"raw roles\",roles);\n    // console.log(Object.values(roles));\n\n    // // Holds an array of the role components to display\n    // let roleComponents = [];\n    // for(var i in roles) roleComponents.push(<Role data={roles[i]} key={i}/>);\n\n}\nexport default withRouter(Results);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport Results from './Results.js';\nimport reportWebVitals from './reportWebVitals';\nimport analyzeGroupchat from './analytics/analyzer.js';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n    useParams\n} from \"react-router-dom\";\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\nlet root = document.getElementById('root');\n\nif (root) {\n  const path = (/#!(\\/.*)$/.exec(window.location.hash) || [])[1];\n\n  if (path) {\n    history.replace(path);\n  }\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Router>\n          <Switch>\n              <Route exact path=\"/\">\n                  <App />\n              </Route>\n              <Route path=\"/results/:id\">\n                  <Results />\n              </Route>\n          </Switch>\n      </Router>\n    </React.StrictMode>,\n    root\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}